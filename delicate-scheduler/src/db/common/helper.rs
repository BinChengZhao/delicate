use super::prelude::*;
use db::model::*;
use db::schema::operation_log;
use state::operation_log::OperationType;
use std::string::ToString;

// TDD.
// operates!("task" , 1 , )
// operates!( name, session(user-id, user-name) , operation_type, values, column_comment);
// operates!( name, session , operation_type, values);

// `column_comment` can generated by const fn.

pub trait SeekTableId {
    fn seek_table_id(&self) -> u64 {
        0
    }
}

macro_rules! impl_seek_table_id_unify{
    ($($target:ty),+) => {
        $(impl SeekTableId for $target {

            fn seek_table_id(&self) -> u64
            {
                self.id as u64
            }

        })+
    };

    ($($target:ty => $id:expr),+) => {
        $(impl SeekTableId for $target {

            fn seek_table_id(&self) -> u64
            {
                $id
            }

        })+
    }
}

impl_seek_table_id_unify!(
    TaskLog,
    TaskLogExtend,
    task::Task,
    User,
    TaskBind,
    ExecutorProcessor,
    ExecutorProcessorBind,
    ExecutorGroup
);
impl_seek_table_id_unify!(NewTaskLog=>0, NewTask=>0, NewUser=>0, NewTaskBind=>0, NewExecutorProcessor=>0, NewExecutorProcessorBind=>0, NewExecutorGroup=>0);

#[allow(dead_code)]
pub(crate) fn operate_log(
    conn: &db::PoolConnection,
    operation_record: NewOperationLog,
) -> Result<(), CommonError> {
    diesel::insert_into(operation_log::table)
        .values(&operation_record)
        .execute(conn)?;
    Ok(())
}

#[allow(dead_code)]

pub(crate) fn generate_operation_log(
    operation_name: impl ToString,
    session: &Session,
    operation_type: OperationType,
    value: impl Serialize + SeekTableId,
    column_comment: impl Serialize,
) -> Result<(NewOperationLog, NewOperationLogDetail), CommonError> {
    let name = operation_name.to_string();
    let table_id = value.seek_table_id();
    let operation_type = operation_type as i8;
    let user_id = session.get::<u64>("user_id")?.unwrap_or_default();
    let user_name = session.get::<String>("user_name")?.unwrap_or_default();
    let operation_log_id = 0;
    let column_comment = to_json_string(&column_comment)?;
    let values = to_json_string(&value)?;

    let new_operation_log = NewOperationLog {
        name,
        table_id,
        operation_type,
        user_id,
        user_name,
    };
    let new_operation_log_detail = NewOperationLogDetail {
        operation_log_id,
        column_comment,
        values,
    };

    Ok((new_operation_log, new_operation_log_detail))
}

#[allow(dead_code)]

pub(crate) fn generate_operation_addtion_log(
    operation_name: impl ToString,
    session: &Session,
    values: impl Serialize + SeekTableId,
    column_comment: impl Serialize,
) -> Result<(NewOperationLog, NewOperationLogDetail), CommonError> {
    generate_operation_log(
        operation_name,
        session,
        OperationType::Addition,
        values,
        column_comment,
    )
}

#[allow(dead_code)]

pub(crate) fn generate_operation_modify_log(
    operation_name: impl ToString,
    session: &Session,
    values: impl Serialize + SeekTableId,
    column_comment: impl Serialize,
) -> Result<(NewOperationLog, NewOperationLogDetail), CommonError> {
    generate_operation_log(
        operation_name,
        session,
        OperationType::Modify,
        values,
        column_comment,
    )
}

#[allow(dead_code)]

pub(crate) fn generate_operation_delete_log(
    operation_name: impl ToString,
    session: &Session,
    values: impl Serialize + SeekTableId,
    column_comment: impl Serialize,
) -> Result<(NewOperationLog, NewOperationLogDetail), CommonError> {
    generate_operation_log(
        operation_name,
        session,
        OperationType::Delete,
        values,
        column_comment,
    )
}

#[allow(dead_code)]

pub(crate) fn generate_operation_task_addtion_log(
    session: &Session,
    values: impl Serialize + SeekTableId,
) -> Result<(NewOperationLog, NewOperationLogDetail), CommonError> {
    #[allow(dead_code)]
    struct ColumnCommentUnit {
        title: String,
        description: String,
    }

    generate_operation_addtion_log("task", session, values, "")
}
